# import MRJob class
from mrjob.job import MRJob
from collections import defaultdict

# define new job by creating derived class
class MyWordCount(MRJob):
    def __init__(self,*args,**kwargs):
        super(MyWordCount,self).__init__(*args,**kwargs)
        self.letters = defaultdict(list)
    # override pre-defined mapper by creating a generator
    # with the default name (mapper)
    def mapper(self, key, value):
        if 0:
            yield
        self.letters["".join(sorted(value))].append(value)

    def mapper_final(self):
        for (letters2,words) in self.letters.iteritems():
            yield letters2,words
    
    # override pre-defined reducer by creating a generator
    # with the default name (reducer)
    def reducer(self, key, values):
        allwords = []
        for words in values:
            allwords.extend(words)
        yield key, (len(allwords),allwords)

if __name__ == '__main__':
    # launch the job!
    MyWordCount.run()
